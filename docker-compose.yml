version: "3.8"
name: dishekime

services:
  server:
    build:
      context: ./server
      dockerfile: ./Dockerfile
    container_name: server
    image: recepdemrci/dishekime-server:${VERSION}
    volumes:
      - ./logs/:/usr/src/server/app/logs
      - ./certs/:/etc/ssl/certs
    ports:
      - ${PORT_SERVER}:${PORT_SERVER}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  client:
    build:
      context: ./client
      dockerfile: ./Dockerfile
      args:
        PORT_CLIENT: ${PORT_CLIENT}
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_AUTH_URL: ${REACT_APP_AUTH_URL}
        REACT_APP_POLICY_URL: ${REACT_APP_POLICY_URL}
        REACT_APP_TERMS_URL: ${REACT_APP_TERMS_URL}
        REACT_APP_PRICING_URL: ${REACT_APP_PRICING_URL}
    container_name: client
    image: recepdemrci/dishekime-client:${VERSION}
    ports:
      - ${PORT_CLIENT}:${PORT_CLIENT}
    env_file:
      - .env
    depends_on:
      - server

  db:
    container_name: db
    image: postgres:15.3
    restart: always
    volumes:
      - ./db/pgdata/:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_DB=${DB_DB}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs/:/etc/nginx/certs
    depends_on:
      - client
      - server
      
  backup:
    build:
      context: ./backup-script
      dockerfile: ./Dockerfile
    container_name: backup
    image: recepdemrci/dishekime-backup:${VERSION}
    volumes:
      - ./backup/:/backup
      - ./logs/:/logs
    env_file:
      - .env
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      server:
        condition: service_started
      db:
        condition: service_healthy
